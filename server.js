const express = require('express');
const multer = require('multer');
const mammoth = require('mammoth');
const { Document, Paragraph, TextRun, HeadingLevel, Packer, AlignmentType, ShadingType } = require('docx');
const path = require('path');
const fs = require('fs').promises;
const timeout = require('connect-timeout');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 3000;

// 设置静态文件目录
app.use(express.static('public'));

// 添加JSON解析中间件
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// 设置全局超时
app.use(timeout('300s'));

// 配置文件上传
const storage = multer.memoryStorage();
const upload = multer({
    storage: storage,
    limits: {
        fileSize: 50 * 1024 * 1024 // 限制50MB
    }
});

// 提取文本内容
async function extractTextFromFile(file) {
    try {
        // 移除PDF处理分支，只保留docx和txt
        if (file.mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
            const result = await mammoth.extractRawText({ buffer: file.buffer });
            return result.value;
        } else if (file.mimetype === 'text/plain') {
            return file.buffer.toString('utf-8');
        } else {
            throw new Error(`不支持的文件类型: ${file.mimetype}`);
        }
    } catch (error) {
        console.error('提取文本时出错:', error);
        throw error;
    }
}

// 添加文本预处理函数 - 改进文档内容分析
function preprocessText(text) {
    // 确保文本有值
    if (!text || typeof text !== 'string') {
        console.warn('预处理收到无效文本');
        return text || '';
    }
    
    // 1. 规范化空白字符
    let processed = text.replace(/\s+/g, ' ');
    
    // 2. 段落分割优化 - 确保段落边界清晰
    processed = processed.replace(/([。！？；])\s*/g, '$1\n');
    
    // 3. 移除连续空行
    processed = processed.replace(/\n{3,}/g, '\n\n');
    
    // 4. 识别并标记标题 - 常见的文档标题格式
    processed = processed.replace(/第[一二三四五六七八九十]+[章节条款]\s*[、：:．.]\s*([^\n]+)/g, '\n## $&\n');
    processed = processed.replace(/([一二三四五六七八九十]+)[、：:．.]\s*([^\n]+)/g, '\n### $&\n');
    
    // 5. 识别并加强文件类型特征
    // 检测是否为规范性文件的特征
    if (/[市省县区]人民政府|人民代表大会|关于.+的[通知决定意见]|[第]?[0-9]+号令|[0-9]{4}年[0-9]{1,2}月[0-9]{1,2}日/.test(text)) {
        processed = '[规范性文件特征]\n' + processed;
    }
    
    // 检测是否为政策措施的特征
    if (/实施方案|行动计划|三年行动|五年规划|支持.+的若干政策|促进.+发展的意见/.test(text)) {
        processed = '[政策措施特征]\n' + processed;
    }
    
    // 6. 提取并突出关键监管术语
    const regulatoryTerms = [
        '市场准入', '负面清单', '特许经营', '招标投标', '政府采购', 
        '税收优惠', '财政补贴', '专项资金', '产业引导基金', '歧视性措施',
        '区域封锁', '地方保护', '行政垄断', '行政许可', '审批'
    ];
    
    for (const term of regulatoryTerms) {
        if (text.includes(term)) {
            processed = processed.replace(new RegExp(term, 'g'), `【${term}】`);
        }
    }
    
    // 7. 尝试识别文件结构
    const sections = detectDocumentStructure(processed);
    if (sections.length > 0) {
        console.log('成功识别文档结构，共', sections.length, '个章节');
        // 可以在这里进一步处理文档结构
    }
    
    return processed;
}

// 文档结构检测函数
function detectDocumentStructure(text) {
    const sections = [];
    
    // 查找常见的章节划分模式
    const patterns = [
        /第[一二三四五六七八九十]+章\s*([^\n]+)/g,
        /第[一二三四五六七八九十]+条\s*([^\n]+)/g,
        /第[0-9]+章\s*([^\n]+)/g,
        /第[0-9]+条\s*([^\n]+)/g,
        /[一二三四五六七八九十]+、\s*([^\n]+)/g,
        /[0-9]+、\s*([^\n]+)/g,
        /（[一二三四五六七八九十]+）\s*([^\n]+)/g,
        /\([0-9]+\)\s*([^\n]+)/g
    ];
    
    for (const pattern of patterns) {
        let match;
        while ((match = pattern.exec(text)) !== null) {
            sections.push({
                type: pattern.toString().includes('章') ? 'chapter' : 
                      pattern.toString().includes('条') ? 'article' : 'section',
                title: match[0],
                content: match[1] || '',
                position: match.index
            });
        }
    }
    
    // 按位置排序
    sections.sort((a, b) => a.position - b.position);
    
    return sections;
}

// 调用DeepSeek API进行审查
async function performReview(req) {
    // 添加这一行标识当前代码版本
    console.log('【版本标识】使用硅基流动DeepSeek-R1接口 v2.3.3 - 超强型错误处理');
    
    // 定义条款内容查找函数
    function getClauseContent(clauseNum, itemNum) {
        // 条款内容映射
        const clauseContents = {
            '9': {
                '1': '在全国统一的市场准入负面清单之外违规制定市场准入性质的负面清单',
                '2': '在全国统一的市场准入负面清单之外违规设立准入许可，或者以备案、证明、目录、计划、规划、认证等方式，要求经营主体经申请获批后方可从事投资经营活动',
                '3': '违法增加市场准入审批环节和程序，或者设置具有行政审批性质的前置备案程序',
                '4': '违规增设市场禁入措施，或者限制经营主体资质、所有制形式、股权比例、经营范围、经营业态、商业模式等方面的市场准入许可管理措施',
                '5': '违规采取临时性市场准入管理措施',
                '6': '其他对市场准入负面清单以外的行业、领域、业务等违法设置审批程序的内容'
            },
            '10': {
                '1': '没有法律、行政法规依据或者未经国务院批准，设置特许经营权或者以特许经营名义增设行政许可事项',
                '2': '未通过招标、谈判等公平竞争方式选择政府特许经营者',
                '3': '违法约定或者未经法定程序变更特许经营期限',
                '4': '其他违法设置或者授予政府特许经营权的内容'
            },
            '11': {
                '1': '以明确要求、暗示等方式，限定或者变相限定经营、购买、使用特定经营者提供的商品',
                '2': '通过限定经营者所有制形式、注册地、组织形式，或者设定其他不合理条件，限定或者变相限定经营、购买、使用特定经营者提供的商品',
                '3': '通过设置不合理的项目库、名录库、备选库、资格库等方式，限定或者变相限定经营、购买、使用特定经营者提供的商品',
                '4': '通过实施奖励性或者惩罚性措施，限定或者变相限定经营、购买、使用特定经营者提供的商品',
                '5': '其他限定经营、购买或者使用特定经营者提供的商品的内容'
            },
            '12': {
                '1': '设置明显不必要或者超出实际需要的准入条件',
                '2': '根据经营者所有制形式、注册地、组织形式、规模等设置歧视性的市场准入、退出条件',
                '3': '在经营者注销、破产、挂牌转让等方面违法设置市场退出障碍',
                '4': '其他设置不合理或者歧视性的准入、退出条件的内容'
            },
            '13': {
                '1': '对外地或者进口商品规定与本地同类商品不同的技术要求、检验标准，更多的检验频次等歧视性措施，或者要求重复检验、重复认证',
                '2': '通过设置关卡或者其他手段，阻碍外地和进口商品、要素进入本地市场或者本地商品、要素对外输出',
                '3': '违法设置审批程序或者其他不合理条件妨碍经营者变更注册地址、减少注册资本，或者对经营者在本地经营年限提出要求',
                '4': '其他限制外地或者进口商品、要素进入本地市场，或者阻碍本地经营者迁出，商品、要素输出的内容'
            },
            '14': {
                '1': '强制、拒绝或者阻碍外地经营者在本地投资经营或者设立分支机构',
                '2': '对外地经营者在本地投资的规模、方式、产值、税收，以及设立分支机构的商业模式、组织形式等进行不合理限制或者提出不合理要求',
                '3': '将在本地投资或者设立分支机构作为参与本地政府采购、招标投标、开展生产经营的必要条件',
                '4': '其他排斥、限制、强制或者变相强制外地经营者在本地投资经营或者设立分支机构的内容'
            },
            '15': {
                '1': '禁止外地经营者参与本地政府采购、招标投标活动',
                '2': '直接或者变相要求优先采购在本地登记注册的经营者提供的商品',
                '3': '将经营者取得业绩和奖项荣誉的区域、缴纳税收社保的区域、投标（响应）产品的产地、注册地址、与本地经营者组成联合体等作为投标（响应）条件、加分条件、中标（成交、入围）条件或者评标条款',
                '4': '将经营者在本地区业绩、成立年限、所获得的奖项荣誉、在本地缴纳税收社保等用于评价企业信用等级，或者根据商品、要素产地等因素设置差异化信用得分，影响外地经营者参加本地政府采购、招标投标',
                '5': '根据经营者投标（响应）产品的产地设置差异性评审标准',
                '6': '设置不合理的公示时间、响应时间、要求现场报名或者现场购买采购文件、招标文件等，影响外地经营者参加本地政府采购、招标投标',
                '7': '其他排斥、限制或者变相限制外地经营者参加本地政府采购、招标投标的内容'
            },
            '16': {
                '1': '对外地或者进口商品、要素设置歧视性的收费项目或者收费标准',
                '2': '对外地或者进口商品、要素实行歧视性的价格',
                '3': '对外地或者进口商品、要素实行歧视性的补贴政策',
                '4': '其他对外地或者进口商品、要素设置歧视性收费项目、收费标准、价格或者补贴的内容'
            },
            '17': {
                '1': '对外地经营者在本地投资经营规定歧视性的资质、标准等要求',
                '2': '对外地经营者实施歧视性的监管执法标准，增加执法检查项目或者提高执法检查频次等',
                '3': '在投资经营规模、方式和税费水平等方面对外地经营者规定歧视性要求',
                '4': '其他在资质标准、监管执法等方面对外地经营者在本地投资经营设置歧视性要求的内容'
            },
            '18': {
                '1': '减轻或者免除特定经营者的税收缴纳义务',
                '2': '通过违法转换经营者组织形式等方式，变相支持特定经营者少缴或者不缴税款',
                '3': '通过对特定产业园区实行核定征收等方式，变相支持特定经营者少缴或者不缴税款',
                '4': '其他没有法律、行政法规依据或者未经国务院批准，给予特定经营者税收优惠的内容'
            },
            '19': {
                '1': '以直接确定受益经营者或者设置不明确、不合理入选条件的名录库、企业库等方式，实施财政奖励或者补贴',
                '2': '根据经营者的所有制形式、组织形式等实施财政奖励或者补贴',
                '3': '以外地经营者将注册地迁移至本地、在本地纳税、纳入本地统计等为条件，实施财政奖励或者补贴',
                '4': '采取列收列支或者违法违规采取先征后返、即征即退等形式，对特定经营者进行返还，或者给予特定经营者财政奖励或者补贴、减免自然资源有偿使用收入等优惠政策',
                '5': '其他没有法律、行政法规依据或者未经国务院批准，给予特定经营者选择性、差异化的财政奖励或者补贴的内容'
            },
            '20': {
                '1': '以直接确定受益经营者，或者设置无客观明确条件的方式在要素获取方面给予优惠政策',
                '2': '减免、缓征或者停征行政事业性收费、政府性基金',
                '3': '减免或者缓征社会保险费用',
                '4': '其他没有法律、行政法规依据或者未经国务院批准给予特定经营者要素获取、行政事业性收费、政府性基金、社会保险费等方面优惠的内容'
            },
            '21': {
                '1': '以行政命令、行政指导等方式，强制、组织或者引导经营者实施垄断行为',
                '2': '通过组织签订协议、备忘录等方式，强制或者变相强制经营者实施垄断行为',
                '3': '对实行市场调节价的商品、要素，违法公开披露或者要求经营者公开披露拟定价格、成本、生产销售数量、生产销售计划、经销商和终端客户信息等生产经营敏感信息',
                '4': '其他强制或者变相强制经营者实施垄断行为，或者为经营者实施垄断行为提供便利条件的内容'
            },
            '22': {
                '1': '对实行政府指导价的商品、要素进行政府定价，违法提供优惠价格',
                '2': '对不属于本级政府定价目录范围内的商品、要素制定政府指导价、政府定价，违法提供优惠价格',
                '3': '不执行政府指导价或者政府定价，违法提供优惠价格',
                '4': '其他超越法定权限制定政府指导价、政府定价，为特定经营者提供优惠价格，影响生产经营行为的内容'
            },
            '23': {
                '1': '对实行市场调节价的商品、要素制定建议价，影响公平竞争',
                '2': '通过违法干预手续费、保费、折扣等方式干预实行市场调节价的商品、要素价格水平，影响公平竞争',
                '3': '其他违法干预实行市场调节价的商品、要素的价格水平的内容'
            },
            '25': {
                '1': '为维护国家安全和发展利益的',
                '2': '为促进科学技术进步、增强国家自主创新能力的',
                '3': '为实现节约能源、保护环境、救灾救助等社会公共利益的',
                '4': '法律、行政法规规定或者经国务院批准的其他情形'
            }
        };
        
        // 增强逻辑：如果只指定了条款号，但没有指定项号
        if (clauseContents[clauseNum] && !itemNum) {
            // 寻找该条款的第一项作为默认内容
            for (const firstItem in clauseContents[clauseNum]) {
                return clauseContents[clauseNum][firstItem];
            }
        }
        
        // 正常的检查流程
        if (clauseContents[clauseNum] && itemNum && clauseContents[clauseNum][itemNum]) {
            return clauseContents[clauseNum][itemNum];
        } else if (clauseContents[clauseNum]) {
            // 如果条款存在但没有找到具体项，返回条款名称
            return checkClauseTitle(clauseNum);
        }
        
        // 未找到任何匹配时的默认返回
        return `[请参考《公平竞争审查条例实施办法》第${clauseNum}条]`;
    }
    
    // 在处理问题时添加条款名称检查
    function checkClauseTitle(clauseNum) {
        const clauseTitles = {
            '9': '市场准入和退出标准',
            '10': '违法设置或者授予政府特许经营权',
            '11': '限定经营、购买或使用特定经营者提供的商品或服务',
            '12': '设置不合理或歧视性的准入、退出条件',
            '13': '限制外地或进口商品、要素进入本地市场',
            '14': '限制外地经营者投资或设立分支机构',
            '15': '限制外地经营者参加政府采购和招投标',
            '16': '歧视性收费、价格和补贴',
            '17': '对外地经营者设置歧视性要求',
            '18': '违法给予特定经营者税收优惠',
            '19': '违法给予特定经营者财政奖励或补贴',
            '20': '违法给予特定经营者其他方面优惠',
            '21': '强制或变相强制经营者实施垄断行为',
            '22': '超越法定权限干预价格',
            '23': '违法干预市场调节价',
            '25': '例外规定'
        };
        
        return clauseTitles[clauseNum] || '未知条款';
    }
    
    // 扩展条款关键词映射，确保涵盖所有条款的特征关键词
    function getClauseKeywords() {
        return {
            // 第9条 - 市场准入和退出标准
            '9': [
                '市场准入负面清单', '准入许可', '审批程序', '前置备案', 
                '市场禁入', '准入管理', '市场准入审批', '行政审批',
                '资质资格要求', '投资经营活动审批'
            ],
            // 第10条 - 违法设置或者授予政府特许经营权
            '10': [
                '特许经营', '特许经营权', '特许经营期限', '特许经营名义', 
                '招标选择特许经营', '谈判选择特许经营'
            ],
            // 第11条 - 限定经营、购买或使用特定经营者提供的商品或服务
            '11': [
                '限定经营', '限定购买', '限定使用', '特定经营者商品', 
                '特定经营者服务', '项目库', '名录库', '备选库', '资格库',
                '指定采购', '指定供应商', '暗示限定', '奖励性限定', '惩罚性限定',
                // 新增关键词 - 地方保护主义相关
                '本地产品', '本地企业', '当地产品', '当地企业', '本地供应商',
                '优先采购本地', '优先使用本地', '鼓励采购本地', '鼓励使用本地',
                '奖励采购本地', '奖励使用本地', '补贴采购本地', '补贴使用本地',
                '限制外地产品', '限制外地企业', '排除外地企业', '阻碍外地产品',
                '地方保护', '区域封锁', '地方壁垒', '本地优先'
            ],
            // 第12条 - 设置不合理或歧视性的准入、退出条件
            '12': [
                '不必要准入条件', '超出需要准入条件', '歧视性准入条件', 
                '歧视性退出条件', '所有制歧视', '注册地歧视', '组织形式歧视',
                '规模歧视', '注销障碍', '破产障碍', '挂牌转让障碍'
            ],
            // 第13条 - 限制外地或进口商品、要素进入本地市场
            '13': [
                '不同技术要求', '不同检验标准', '重复检验', '重复认证', 
                '设置关卡', '阻碍进口', '阻碍外地',
                '变更注册地址', '减少注册资本', '本地经营年限'
            ],
            // 第14条 - 限制外地经营者投资或设立分支机构
            '14': [
                '外地投资', '设立分支机构', '阻碍外地经营者', '外地投资规模', 
                '外地投资方式', '分支机构商业模式', '投资经营条件'
            ],
            // 第15条 - 限制外地经营者参加政府采购和招投标
            '15': [
                '政府采购', '招标投标', '限制外地参与', '本地采购', 
                '本地优先', '歧视性评审', '业绩区域限制', '区域社保',
                '区域税收', '本地注册', '本地登记', '响应条件',
                '评标条款', '公示时间', '响应时间', '现场报名', '现场购买'
            ],
            // 第16条 - 歧视性收费、价格和补贴
            '16': [
                '歧视性收费', '歧视性价格', '歧视性补贴', '差别收费', 
                '外地收费高', '进口收费高'
            ],
            // 第17条 - 对外地经营者设置歧视性要求
            '17': [
                '歧视性资质', '歧视性标准', '歧视性监管', '歧视性执法', 
                '增加检查项目', '提高检查频次', '歧视性税费'
            ],
            // 第18条 - 违法给予特定经营者税收优惠
            '18': [
                '税收优惠', '免税', '减税', '税收缴纳', '组织形式转换', 
                '少缴税款', '不缴税款', '核定征收', '税收减免'
            ],
            // 第19条 - 违法给予特定经营者财政奖励或补贴
            '19': [
                '财政奖励', '财政补贴', '企业库', '名录库', '差异化补贴', 
                '所有制补贴', '组织形式补贴', '注册地迁移', '列收列支',
                '先征后返', '即征即退', '财政返还'
            ],
            // 第20条 - 违法给予特定经营者其他方面优惠
            '20': [
                '要素获取优惠', '行政事业性收费', '政府性基金', '社会保险费', 
                '缓征', '停征', '减免收费'
            ],
            // 第21条 - 强制或变相强制经营者实施垄断行为
            '21': [
                '行政命令垄断', '行政指导垄断', '组织签订协议', '备忘录垄断', 
                '公开生产经营敏感信息', '公开价格信息', '公开成本信息',
                '公开销售信息', '公开客户信息'
            ],
            // 第22条 - 超越法定权限干预价格
            '22': [
                '政府指导价', '政府定价', '目录外定价', '非执行定价', 
                '优惠价格', '定价目录'
            ],
            // 第23条 - 违法干预市场调节价
            '23': [
                '市场调节价', '建议价', '手续费干预', '保费干预', 
                '折扣干预', '价格水平干预'
            ]
        };
    }
    
    // 添加新函数：寻找最匹配的条款项
    function findBestMatchingItem(clauseNum, text) {
        // 如果没有有效的条款号，直接返回null
        if (!clauseNum) return null;
        
        // 获取条款内容映射
        const clauseContents = {
            '9': {
                '1': '在全国统一的市场准入负面清单之外违规制定市场准入性质的负面清单',
                '2': '在全国统一的市场准入负面清单之外违规设立准入许可，或者以备案、证明、目录、计划、规划、认证等方式，要求经营主体经申请获批后方可从事投资经营活动',
                '3': '违法增加市场准入审批环节和程序，或者设置具有行政审批性质的前置备案程序',
                '4': '违规增设市场禁入措施，或者限制经营主体资质、所有制形式、股权比例、经营范围、经营业态、商业模式等方面的市场准入许可管理措施',
                '5': '违规采取临时性市场准入管理措施',
                '6': '其他对市场准入负面清单以外的行业、领域、业务等违法设置审批程序的内容'
            },
            '10': {
                '1': '没有法律、行政法规依据或者未经国务院批准，设置特许经营权或者以特许经营名义增设行政许可事项',
                '2': '未通过招标、谈判等公平竞争方式选择政府特许经营者',
                '3': '违法约定或者未经法定程序变更特许经营期限',
                '4': '其他违法设置或者授予政府特许经营权的内容'
            },
            '11': {
                '1': '以明确要求、暗示等方式，限定或者变相限定经营、购买、使用特定经营者提供的商品',
                '2': '通过限定经营者所有制形式、注册地、组织形式，或者设定其他不合理条件，限定或者变相限定经营、购买、使用特定经营者提供的商品',
                '3': '通过设置不合理的项目库、名录库、备选库、资格库等方式，限定或者变相限定经营、购买、使用特定经营者提供的商品',
                '4': '通过实施奖励性或者惩罚性措施，限定或者变相限定经营、购买、使用特定经营者提供的商品',
                '5': '其他限定经营、购买或者使用特定经营者提供的商品的内容'
            },
            '12': {
                '1': '设置明显不必要或者超出实际需要的准入条件',
                '2': '根据经营者所有制形式、注册地、组织形式、规模等设置歧视性的市场准入、退出条件',
                '3': '在经营者注销、破产、挂牌转让等方面违法设置市场退出障碍',
                '4': '其他设置不合理或者歧视性的准入、退出条件的内容'
            },
            '13': {
                '1': '对外地或者进口商品规定与本地同类商品不同的技术要求、检验标准，更多的检验频次等歧视性措施，或者要求重复检验、重复认证',
                '2': '通过设置关卡或者其他手段，阻碍外地和进口商品、要素进入本地市场或者本地商品、要素对外输出',
                '3': '违法设置审批程序或者其他不合理条件妨碍经营者变更注册地址、减少注册资本，或者对经营者在本地经营年限提出要求',
                '4': '其他限制外地或者进口商品、要素进入本地市场，或者阻碍本地经营者迁出，商品、要素输出的内容'
            },
            '14': {
                '1': '强制、拒绝或者阻碍外地经营者在本地投资经营或者设立分支机构',
                '2': '对外地经营者在本地投资的规模、方式、产值、税收，以及设立分支机构的商业模式、组织形式等进行不合理限制或者提出不合理要求',
                '3': '将在本地投资或者设立分支机构作为参与本地政府采购、招标投标、开展生产经营的必要条件',
                '4': '其他排斥、限制、强制或者变相强制外地经营者在本地投资经营或者设立分支机构的内容'
            },
            '15': {
                '1': '禁止外地经营者参与本地政府采购、招标投标活动',
                '2': '直接或者变相要求优先采购在本地登记注册的经营者提供的商品',
                '3': '将经营者取得业绩和奖项荣誉的区域、缴纳税收社保的区域、投标（响应）产品的产地、注册地址、与本地经营者组成联合体等作为投标（响应）条件、加分条件、中标（成交、入围）条件或者评标条款',
                '4': '将经营者在本地区业绩、成立年限、所获得的奖项荣誉、在本地缴纳税收社保等用于评价企业信用等级，或者根据商品、要素产地等因素设置差异化信用得分，影响外地经营者参加本地政府采购、招标投标',
                '5': '根据经营者投标（响应）产品的产地设置差异性评审标准',
                '6': '设置不合理的公示时间、响应时间、要求现场报名或者现场购买采购文件、招标文件等，影响外地经营者参加本地政府采购、招标投标',
                '7': '其他排斥、限制或者变相限制外地经营者参加本地政府采购、招标投标的内容'
            },
            '16': {
                '1': '对外地或者进口商品、要素设置歧视性的收费项目或者收费标准',
                '2': '对外地或者进口商品、要素实行歧视性的价格',
                '3': '对外地或者进口商品、要素实行歧视性的补贴政策',
                '4': '其他对外地或者进口商品、要素设置歧视性收费项目、收费标准、价格或者补贴的内容'
            },
            '17': {
                '1': '对外地经营者在本地投资经营规定歧视性的资质、标准等要求',
                '2': '对外地经营者实施歧视性的监管执法标准，增加执法检查项目或者提高执法检查频次等',
                '3': '在投资经营规模、方式和税费水平等方面对外地经营者规定歧视性要求',
                '4': '其他在资质标准、监管执法等方面对外地经营者在本地投资经营设置歧视性要求的内容'
            },
            '18': {
                '1': '减轻或者免除特定经营者的税收缴纳义务',
                '2': '通过违法转换经营者组织形式等方式，变相支持特定经营者少缴或者不缴税款',
                '3': '通过对特定产业园区实行核定征收等方式，变相支持特定经营者少缴或者不缴税款',
                '4': '其他没有法律、行政法规依据或者未经国务院批准，给予特定经营者税收优惠的内容'
            },
            '19': {
                '1': '以直接确定受益经营者或者设置不明确、不合理入选条件的名录库、企业库等方式，实施财政奖励或者补贴',
                '2': '根据经营者的所有制形式、组织形式等实施财政奖励或者补贴',
                '3': '以外地经营者将注册地迁移至本地、在本地纳税、纳入本地统计等为条件，实施财政奖励或者补贴',
                '4': '采取列收列支或者违法违规采取先征后返、即征即退等形式，对特定经营者进行返还，或者给予特定经营者财政奖励或者补贴、减免自然资源有偿使用收入等优惠政策',
                '5': '其他没有法律、行政法规依据或者未经国务院批准，给予特定经营者选择性、差异化的财政奖励或者补贴的内容'
            },
            '20': {
                '1': '以直接确定受益经营者，或者设置无客观明确条件的方式在要素获取方面给予优惠政策',
                '2': '减免、缓征或者停征行政事业性收费、政府性基金',
                '3': '减免或者缓征社会保险费用',
                '4': '其他没有法律、行政法规依据或者未经国务院批准给予特定经营者要素获取、行政事业性收费、政府性基金、社会保险费等方面优惠的内容'
            },
            '21': {
                '1': '以行政命令、行政指导等方式，强制、组织或者引导经营者实施垄断行为',
                '2': '通过组织签订协议、备忘录等方式，强制或者变相强制经营者实施垄断行为',
                '3': '对实行市场调节价的商品、要素，违法公开披露或者要求经营者公开披露拟定价格、成本、生产销售数量、生产销售计划、经销商和终端客户信息等生产经营敏感信息',
                '4': '其他强制或者变相强制经营者实施垄断行为，或者为经营者实施垄断行为提供便利条件的内容'
            },
            '22': {
                '1': '对实行政府指导价的商品、要素进行政府定价，违法提供优惠价格',
                '2': '对不属于本级政府定价目录范围内的商品、要素制定政府指导价、政府定价，违法提供优惠价格',
                '3': '不执行政府指导价或者政府定价，违法提供优惠价格',
                '4': '其他超越法定权限制定政府指导价、政府定价，为特定经营者提供优惠价格，影响生产经营行为的内容'
            },
            '23': {
                '1': '对实行市场调节价的商品、要素制定建议价，影响公平竞争',
                '2': '通过违法干预手续费、保费、折扣等方式干预实行市场调节价的商品、要素价格水平，影响公平竞争',
                '3': '其他违法干预实行市场调节价的商品、要素的价格水平的内容'
            },
            '25': {
                '1': '为维护国家安全和发展利益的',
                '2': '为促进科学技术进步、增强国家自主创新能力的',
                '3': '为实现节约能源、保护环境、救灾救助等社会公共利益的',
                '4': '法律、行政法规规定或者经国务院批准的其他情形'
            }
        };
        
        // 确保条款号有效
        if (!clauseContents[clauseNum]) {
            console.log(`无效的条款号: ${clauseNum}`);
            return null;
        }
        
        const text_lower = text.toLowerCase();
        let bestItem = null;
        let highestScore = 0;
        
        // 遍历所有该条款下的项
        for (const itemNum in clauseContents[clauseNum]) {
            const itemContent = clauseContents[clauseNum][itemNum];
            // 如果项内容为空，跳过
            if (!itemContent) continue;
            
            // 计算文本与项内容的匹配度
            let score = 0;
            
            // 1. 直接包含完整项内容的情况
            if (text_lower.includes(itemContent.toLowerCase())) {
                score += 100;
            }
            
            // 2. 关键词匹配
            const keywords = itemContent.split(/[，。、；：\s]+/);
            for (const keyword of keywords) {
                if (keyword.length > 2 && text_lower.includes(keyword.toLowerCase())) {
                    score += 10;
                }
            }
            
            // 3. 特殊关键词加权
            // 对于一些特别能表明条款特征的关键词进行加权
            const specialKeywords = {
                '负面清单': 30,
                '特许经营': 30,
                '政府采购': 30,
                '招标投标': 30,
                '税收优惠': 30,
                '财政奖励': 30,
                '补贴政策': 30,
                '垄断行为': 30,
                '政府定价': 30,
                '市场调节价': 30
            };
            
            for (const [keyword, weight] of Object.entries(specialKeywords)) {
                if (itemContent.includes(keyword) && text_lower.includes(keyword.toLowerCase())) {
                    score += weight;
                }
            }
            
            // 4. 考虑项的排序位置（通常第1项比第4项更常见）
            score -= (parseInt(itemNum) - 1) * 2;
            
            // 记录当前项的分数
            console.log(`条款第${clauseNum}条第${itemNum}项的匹配分数: ${score}`);
            
            // 更新最佳匹配
            if (score > highestScore) {
                highestScore = score;
                bestItem = itemNum;
            }
        }
        
        // 只有当分数超过阈值时才认为是有效匹配
        if (highestScore > 15) {
            console.log(`找到最佳匹配项: 第${clauseNum}条第${bestItem}项，分数: ${highestScore}`);
            return bestItem;
        } else {
            console.log(`没有找到足够匹配的项，最高分数: ${highestScore}`);
            return null;
        }
    }
    
    // 智能判断条款函数
    function intelligentClauseDetection(title, description, quote, currentClause) {
        // 获取所有条款的关键词映射
        const clauseKeywords = getClauseKeywords();
        
        // 增强分析的文本内容
        const combinedText = (title + ' ' + description + ' ' + quote).toLowerCase();
        
        // 添加基于上下文的高级分析
        const detectedContext = detectContextualInformation(combinedText);
        console.log('检测到的上下文信息:', detectedContext);
        
        // 为每个条款计算匹配分数
        const clauseScores = {};
        
        // 设置特殊优先级规则 - 某些特定短语几乎可以确定对应的条款
        const definiteMatches = {
            '政府采购': '15',
            '招标投标': '15',
            '本地注册采购': '15',
            '本地优先采购': '15',
            '特许经营权': '10',
            '税收优惠': '18',
            '财政补贴': '19',
            '歧视性收费': '16',
            '市场准入负面清单': '9',
            '垄断行为': '21',
            '政府定价': '22',
            '市场调节价': '23',
            '审批程序': '9',
            '本地企业产品': '11',  // 新增明确匹配项
            '限定本地': '11',      // 新增明确匹配项
            '优先选择本地': '11'    // 新增明确匹配项
        };
        
        // 添加强匹配规则 - 针对典型用例的高精度匹配
        const strongMatchPatterns = [
            {
                pattern: /限定.{0,10}(本地|当地).{0,10}(企业|产品|供应商)/,
                clause: '11',
                score: 150,
                description: '限定本地企业/产品的表述'
            },
            {
                pattern: /(采购|购买|使用).{0,15}(本地|当地).{0,15}(企业|产品|供应商)/,
                clause: '11',
                score: 140,
                description: '要求采购本地企业/产品的表述'
            },
            {
                pattern: /奖励.{0,15}(采购|购买|使用).{0,15}(本地|当地)/,
                clause: '11',
                score: 150,
                description: '奖励采购本地企业/产品的表述'
            },
            {
                pattern: /(限制|阻碍|排除).{0,15}外地.{0,15}(企业|产品|供应商)/,
                clause: '11',
                score: 140,
                description: '限制外地企业/产品的表述'
            },
            {
                pattern: /财政.{0,10}(补贴|奖励|支持).{0,20}(本地|当地)/,
                clause: '19',
                score: 140,
                description: '财政补贴给本地企业的表述'
            },
            {
                pattern: /税收.{0,10}(优惠|减免|返还).{0,20}(特定|本地|当地)/,
                clause: '18',
                score: 140,
                description: '税收优惠给特定企业的表述'
            }
        ];
        
        // 应用强匹配规则
        for (const rule of strongMatchPatterns) {
            if (rule.pattern.test(combinedText)) {
                clauseScores[rule.clause] = (clauseScores[rule.clause] || 0) + rule.score;
                console.log(`强匹配规则命中: "${rule.description}" -> 第${rule.clause}条，增加${rule.score}分`);
            }
        }
        
        // 检查是否有明确匹配的短语
        for (const [phrase, clause] of Object.entries(definiteMatches)) {
            if (combinedText.includes(phrase)) {
                // 如果找到明确匹配，给予高分
                clauseScores[clause] = (clauseScores[clause] || 0) + 100;
                console.log(`发现明确匹配短语 "${phrase}" -> 第${clause}条，增加100分`);
            }
        }
        
        // 上下文信息增强匹配 - 基于检测到的文档特征加强特定条款的匹配度
        if (detectedContext.documentType === 'regulation') {
            // 规范性文件更可能涉及准入标准、特许经营等
            clauseScores['9'] = (clauseScores['9'] || 0) + 30;
            clauseScores['10'] = (clauseScores['10'] || 0) + 30;
            clauseScores['12'] = (clauseScores['12'] || 0) + 20;
            console.log('规范性文件特征增强: 第9条+30分, 第10条+30分, 第12条+20分');
        } else if (detectedContext.documentType === 'policy') {
            // 政策文件更可能涉及补贴、优惠等
            clauseScores['18'] = (clauseScores['18'] || 0) + 30;
            clauseScores['19'] = (clauseScores['19'] || 0) + 30;
            clauseScores['20'] = (clauseScores['20'] || 0) + 30;
            console.log('政策文件特征增强: 第18条+30分, 第19条+30分, 第20条+30分');
        } else if (detectedContext.documentType === 'procurement') {
            // 采购招标文件更可能涉及政府采购、招投标限制等
            clauseScores['15'] = (clauseScores['15'] || 0) + 50;
            clauseScores['11'] = (clauseScores['11'] || 0) + 30;
            console.log('采购招标特征增强: 第15条+50分, 第11条+30分');
        }
        
        // 根据检测到的可能问题类型增强相应条款
        if (detectedContext.problemTypes.includes('local_protection')) {
            // 本地保护主义问题
            clauseScores['13'] = (clauseScores['13'] || 0) + 40;
            clauseScores['14'] = (clauseScores['14'] || 0) + 40;
            clauseScores['15'] = (clauseScores['15'] || 0) + 40;
            clauseScores['17'] = (clauseScores['17'] || 0) + 40;
            console.log('本地保护主义特征增强: 第13、14、15、17条各+40分');
        }
        
        if (detectedContext.problemTypes.includes('subsidy')) {
            // 补贴优惠问题
            clauseScores['18'] = (clauseScores['18'] || 0) + 40;
            clauseScores['19'] = (clauseScores['19'] || 0) + 40;
            clauseScores['20'] = (clauseScores['20'] || 0) + 40;
            console.log('补贴优惠特征增强: 第18、19、20条各+40分');
        }
        
        // 为每个条款检查关键词匹配
        for (const [clauseNum, keywords] of Object.entries(clauseKeywords)) {
            clauseScores[clauseNum] = clauseScores[clauseNum] || 0;
            
            // 计算关键词匹配次数
            for (const keyword of keywords) {
                if (combinedText.includes(keyword)) {
                    // 基础分数增加
                    clauseScores[clauseNum] += 10;
                    
                    // 如果关键词出现在标题中，给予额外分数
                    if (title.toLowerCase().includes(keyword)) {
                        clauseScores[clauseNum] += 20;
                    }
                    
                    // 如果关键词出现在原文引用中，给予额外分数
                    if (quote.toLowerCase().includes(keyword)) {
                        clauseScores[clauseNum] += 15;
                    }
                }
            }
        }
        
        // 额外的上下文检测
        // 本地采购类问题与第15条高度相关
        if (/本地.*采购|采购.*本地|优先.*本地|本地.*优先/i.test(combinedText)) {
            clauseScores['15'] = (clauseScores['15'] || 0) + 50;
            console.log('检测到"本地采购"相关表述，第15条+50分');
        }
        
        // 税收优惠类问题与第18条高度相关
        if (/税收.*优惠|减免.*税|税.*减免|免税/i.test(combinedText)) {
            clauseScores['18'] = (clauseScores['18'] || 0) + 50;
            console.log('检测到"税收优惠"相关表述，第18条+50分');
        }
        
        // 财政补贴类问题与第19条高度相关
        if (/财政.*补贴|补贴.*财政|奖励.*财政|财政.*奖励/i.test(combinedText)) {
            clauseScores['19'] = (clauseScores['19'] || 0) + 50;
            console.log('检测到"财政补贴"相关表述，第19条+50分');
        }
        
        // 找出得分最高的条款
        let highestScore = 0;
        let suggestedClause = currentClause;
        
        // 记录所有条款得分，按分数排序
        const scoredClauses = Object.entries(clauseScores)
            .map(([clause, score]) => ({ clause, score }))
            .sort((a, b) => b.score - a.score);
        
        console.log('条款得分排序结果:', JSON.stringify(scoredClauses.slice(0, 5)));
        
        if (scoredClauses.length > 0) {
            highestScore = scoredClauses[0].score;
            
            if (!currentClause || highestScore > 40) {
                suggestedClause = scoredClauses[0].clause;
            }
        }
        
        // 记录条款判断过程
        console.log('条款检测分析:', {
            currentClause,
            suggestedClause,
            highestScore,
            textSample: combinedText.substring(0, 100) + '...'
        });
        
        // 只有当分数差异足够大时才建议更改
        if (currentClause && 
            clauseScores[suggestedClause] > 0 && 
            (clauseScores[currentClause] || 0) < clauseScores[suggestedClause] - 30) {
            console.log(`建议将条款从第${currentClause}条更改为第${suggestedClause}条`);
            
            // 针对限制外地商品和使用本地产品的特征情况，优先使用第11条
            if (/限定.{0,10}(本地|当地).{0,10}(企业|产品|供应商)/.test(combinedText) || 
                /(采购|购买|使用).{0,15}(本地|当地).{0,15}(企业|产品|供应商)/.test(combinedText) ||
                /奖励.{0,15}(采购|购买|使用).{0,15}(本地|当地)/.test(combinedText)) {
                
                // 特殊处理：当涉及"限定经营、购买或使用特定经营者提供的商品"时，应该是第11条
                if (suggestedClause !== '11' && clauseScores['11'] > 0) {
                    // 如果已有第11条得分且不低，强制使用第11条
                    console.log(`特殊情况处理：检测到限定使用本地产品的典型表述，强制使用第11条而非第${suggestedClause}条`);
                    return '11';
                }
            }
            
            return suggestedClause;
        }
        
        // 如果没有当前条款，但有高分条款建议，则返回建议
        if (!currentClause && highestScore > 30) {
            // 针对限制外地商品和使用本地产品的特征情况，优先使用第11条
            if (/限定.{0,10}(本地|当地).{0,10}(企业|产品|供应商)/.test(combinedText) || 
                /(采购|购买|使用).{0,15}(本地|当地).{0,15}(企业|产品|供应商)/.test(combinedText) ||
                /奖励.{0,15}(采购|购买|使用).{0,15}(本地|当地)/.test(combinedText)) {
                
                // 特殊处理：当涉及"限定经营、购买或使用特定经营者提供的商品"时，应该是第11条
                if (suggestedClause !== '11' && clauseScores['11'] > 0) {
                    // 如果已有第11条得分且不低，强制使用第11条
                    console.log(`特殊情况处理：检测到限定使用本地产品的典型表述，强制使用第11条而非第${suggestedClause}条`);
                    return '11';
                }
            }
            
            return suggestedClause;
        }
        
        // 否则保留当前条款
        return currentClause;
    }
    
    // 新增上下文信息检测函数
    function detectContextualInformation(text) {
        // 初始化结果对象
        const result = {
            documentType: 'unknown', // regulation, policy, procurement, unknown
            problemTypes: [], // local_protection, subsidy, monopoly, discrimination
            specificFeatures: []
        };
        
        // 文档类型检测
        if (/政府令|政府办公厅|人民政府|令第[0-9]+号|条例|办法|规定|规则/.test(text)) {
            result.documentType = 'regulation';
            result.specificFeatures.push('regulation_document');
        } else if (/实施方案|行动计划|发展规划|产业政策|专项资金|补贴|奖励|支持/.test(text)) {
            result.documentType = 'policy';
            result.specificFeatures.push('policy_document');
        } else if (/招标公告|投标|采购公告|政府采购|招标文件|投标人|供应商|资格预审/.test(text)) {
            result.documentType = 'procurement';
            result.specificFeatures.push('procurement_document');
        }
        
        // 问题类型检测
        // 本地保护主义特征
        if (/本地|当地|属地|优先支持|优先考虑|本省|本市|本区/.test(text)) {
            result.problemTypes.push('local_protection');
            result.specificFeatures.push('local_bias');
        }
        
        // 补贴、优惠特征
        if (/补贴|奖励|财政支持|税收减免|税收优惠|资金支持|贴息|补助/.test(text)) {
            result.problemTypes.push('subsidy');
            result.specificFeatures.push('financial_support');
        }
        
        // 垄断特征
        if (/垄断|独家|专营|统一经营|统一管理|指定|唯一|特许经营权/.test(text)) {
            result.problemTypes.push('monopoly');
            result.specificFeatures.push('monopolistic_tendency');
        }
        
        // 歧视性特征
        if (/区别对待|差别化|不同标准|不同要求|限制外地|限制外资|外地企业/.test(text)) {
            result.problemTypes.push('discrimination');
            result.specificFeatures.push('discriminatory_treatment');
        }
        
        return result;
    }
    
    try {
        console.log('开始文件审查过程');
        
        // 提取文件内容
        const fileContent = await extractTextFromFile(req.file);
        console.log(`提取的文件内容长度: ${fileContent.length} 字符`);
        console.log(`文件内容预览: ${fileContent.substring(0, 100)}...`);
        
        // 检查环境变量
        console.log('检查API环境变量...');
        console.log('NODE_ENV:', process.env.NODE_ENV);
        console.log('是否存在API密钥环境变量:', process.env.SILICONFLOW_API_KEY ? '是' : '否');
        
        // 设置API密钥
        let apiKey;
        if (process.env.SILICONFLOW_API_KEY) {
            apiKey = process.env.SILICONFLOW_API_KEY;
            console.log('使用环境变量中的API密钥');
        } else {
            // 固定使用原始API密钥，不进行轮换
            apiKey = 'sk-ndqddvkvqsfrvirhauqtrjejiwfawokxzakscpieqelbuhik';
            console.log('使用默认API密钥');
        }
        
        // 记录API密钥前缀以便调试（不要记录完整的密钥）
        console.log(`使用API密钥: ${apiKey.substring(0, 5)}...${apiKey.substring(apiKey.length - 4)}`);
        
        // 修改API URL为硅基流动地址
        const apiUrl = 'https://api.siliconflow.cn/v1/chat/completions';
        console.log(`使用API URL: ${apiUrl}`);
        
        // 更新系统提示词，基于《公平竞争审查条例实施办法》
        const systemPrompt = `你是一个专业的公平竞争审查专家，负责严格依据《公平竞争审查条例实施办法》（国家市场监督管理总局2025年2月28日公布，自2025年4月20日起施行）进行审查。

首先，分析待审查文件的类型和特征：
1. 规范性文件：如政府规章、规范性文件、地方性法规等
2. 政策措施：如产业政策、投资政策、补贴政策、地方发展计划等
3. 其他文件：包括招标投标文件、政府采购文件等

针对不同文件类型，有不同的审查要点和侧重点：
- 规范性文件：重点审查是否有设立市场准入和退出标准、特许经营权、歧视性准入条件等结构性问题
- 政策措施：重点审查是否存在不当补贴、税收优惠、差别待遇、地方保护等实质性问题
- 招标投标文件：重点审查是否有限制外地企业参与、设置不合理条件等排他性问题

在分析文本时，注意以下关键指标：
1. **明显限制性词语**：如"仅限本地企业"、"优先支持"、"限定使用"、"必须具备XX年本地经验"等
2. **隐性排除性表述**：如"熟悉本地情况"、"就近服务"、"属地化管理"等变相设置地域限制
3. **差异化标准**：对本地与外地企业设置不同标准、要求、门槛的情况
4. **补贴和优惠政策**：是否基于所有制形式、地域、规模等给予特定企业特殊待遇

【特别提示】关于地方保护和本地企业优待政策的精准识别：
- 如果政策措施明确限定或鼓励采购本地产品、使用本地供应商，或对购买本地产品给予补贴奖励，这属于典型的"限定经营、购买或使用特定经营者提供的商品"行为，应适用第十一条进行审查。
- 财政奖励和补贴政策虽然适用第十九条，但如果其奖励的对象或条件是"购买或使用本地产品"，则应优先适用第十一条，因为这类政策本质上是地方保护，通过奖励变相限定使用本地产品。
- 严格区分"财政补贴本地企业"和"财政奖励采购本地产品"：前者适用第十九条，后者适用第十一条。

现在，严格按照以下条款进行审查：

一、市场准入和退出标准（对应第九条）：
1) 在全国统一的市场准入负面清单之外违规制定市场准入性质的负面清单；
2) 在全国统一的市场准入负面清单之外违规设立准入许可，或者以备案、证明、目录、计划、规划、认证等方式，要求经营主体经申请获批后方可从事投资经营活动；
3) 违法增加市场准入审批环节和程序，或者设置具有行政审批性质的前置备案程序；
4) 违规增设市场禁入措施，或者限制经营主体资质、所有制形式、股权比例、经营范围、经营业态、商业模式等方面的市场准入许可管理措施；
5) 违规采取临时性市场准入管理措施；
6) 其他对市场准入负面清单以外的行业、领域、业务等违法设置审批程序的内容。

二、违法设置或者授予政府特许经营权（对应第十条）：
1) 没有法律、行政法规依据或者未经国务院批准，设置特许经营权或者以特许经营名义增设行政许可事项；
2) 未通过招标、谈判等公平竞争方式选择政府特许经营者；
3) 违法约定或者未经法定程序变更特许经营期限；
4) 其他违法设置或者授予政府特许经营权的内容。

三、限定经营、购买或使用特定经营者提供的商品或服务（对应第十一条）：
【重点条款】本条是审查地方保护主义政策的主要依据，关注以下情形：
1) 以明确要求、暗示等方式，限定或者变相限定经营、购买、使用特定经营者提供的商品；
   - 典型表现：明确要求采购本地产品、使用本地供应商
   - 变相方式：通过奖励或表彰等激励方式引导使用本地产品
2) 通过限定经营者所有制形式、注册地、组织形式，或者设定其他不合理条件，限定或者变相限定经营、购买、使用特定经营者提供的商品；
   - 典型表现：要求供应商必须是本地注册企业、设定本地企业才能满足的条件
   - 认定标准：非必要的地域性条件限制
3) 通过设置不合理的项目库、名录库、备选库、资格库等方式，限定或者变相限定经营、购买、使用特定经营者提供的商品；
   - 典型表现：建立仅包含本地企业的备选供应商名录
   - 认定标准：入库条件带有地域歧视性
4) 通过实施奖励性或者惩罚性措施，限定或者变相限定经营、购买、使用特定经营者提供的商品；
   - 典型表现：对采购本地产品的单位或个人给予奖励、补贴或加分
   - 重点判断：通过财政奖励等措施变相鼓励使用本地产品
5) 其他限定经营、购买或者使用特定经营者提供的商品的内容。

四、设置不合理或歧视性的准入、退出条件（对应第十二条）：
1) 设置明显不必要或者超出实际需要的准入条件；
2) 根据经营者所有制形式、注册地、组织形式、规模等设置歧视性的市场准入、退出条件；
3) 在经营者注销、破产、挂牌转让等方面违法设置市场退出障碍；
4) 其他设置不合理或者歧视性的准入、退出条件的内容。

五、限制外地或进口商品、要素进入本地市场（对应第十三条）：
1) 对外地或者进口商品规定与本地同类商品不同的技术要求、检验标准，更多的检验频次等歧视性措施，或者要求重复检验、重复认证；
2) 通过设置关卡或者其他手段，阻碍外地和进口商品、要素进入本地市场或者本地商品、要素对外输出；
3) 违法设置审批程序或者其他不合理条件妨碍经营者变更注册地址、减少注册资本，或者对经营者在本地经营年限提出要求；
4) 其他限制外地或者进口商品、要素进入本地市场，或者阻碍本地经营者迁出，商品、要素输出的内容。

六、限制外地经营者投资或设立分支机构（对应第十四条）：
1) 强制、拒绝或者阻碍外地经营者在本地投资经营或者设立分支机构；
2) 对外地经营者在本地投资的规模、方式、产值、税收，以及设立分支机构的商业模式、组织形式等进行不合理限制或者提出不合理要求；
3) 将在本地投资或者设立分支机构作为参与本地政府采购、招标投标、开展生产经营的必要条件；
4) 其他排斥、限制、强制或者变相强制外地经营者在本地投资经营或者设立分支机构的内容。

七、限制外地经营者参加政府采购和招投标（对应第十五条）：
1) 禁止外地经营者参与本地政府采购、招标投标活动；
2) 直接或者变相要求优先采购在本地登记注册的经营者提供的商品；
3) 将经营者取得业绩和奖项荣誉的区域、缴纳税收社保的区域、投标（响应）产品的产地、注册地址、与本地经营者组成联合体等作为投标（响应）条件、加分条件、中标（成交、入围）条件或者评标条款；
4) 将经营者在本地区业绩、成立年限、所获得的奖项荣誉、在本地缴纳税收社保等用于评价企业信用等级，或者根据商品、要素产地等因素设置差异化信用得分，影响外地经营者参加本地政府采购、招标投标；
5) 根据经营者投标（响应）产品的产地设置差异性评审标准；
6) 设置不合理的公示时间、响应时间、要求现场报名或者现场购买采购文件、招标文件等，影响外地经营者参加本地政府采购、招标投标；
7) 其他排斥、限制或者变相限制外地经营者参加本地政府采购、招标投标的内容。

八、歧视性收费、价格和补贴（对应第十六条）：
1) 对外地或者进口商品、要素设置歧视性的收费项目或者收费标准；
2) 对外地或者进口商品、要素实行歧视性的价格；
3) 对外地或者进口商品、要素实行歧视性的补贴政策；
4) 其他对外地或者进口商品、要素设置歧视性收费项目、收费标准、价格或者补贴的内容。

九、对外地经营者设置歧视性要求（对应第十七条）：
1) 对外地经营者在本地投资经营规定歧视性的资质、标准等要求；
2) 对外地经营者实施歧视性的监管执法标准，增加执法检查项目或者提高执法检查频次等；
3) 在投资经营规模、方式和税费水平等方面对外地经营者规定歧视性要求；
4) 其他在资质标准、监管执法等方面对外地经营者在本地投资经营设置歧视性要求的内容。

十、违法给予特定经营者税收优惠（对应第十八条）：
1) 减轻或者免除特定经营者的税收缴纳义务；
2) 通过违法转换经营者组织形式等方式，变相支持特定经营者少缴或者不缴税款；
3) 通过对特定产业园区实行核定征收等方式，变相支持特定经营者少缴或者不缴税款；
4) 其他没有法律、行政法规依据或者未经国务院批准，给予特定经营者税收优惠的内容。

十一、违法给予特定经营者财政奖励或补贴（对应第十九条）：
1) 以直接确定受益经营者或者设置不明确、不合理入选条件的名录库、企业库等方式，实施财政奖励或者补贴；
2) 根据经营者的所有制形式、组织形式等实施财政奖励或者补贴；
3) 以外地经营者将注册地迁移至本地、在本地纳税、纳入本地统计等为条件，实施财政奖励或者补贴；
4) 采取列收列支或者违法违规采取先征后返、即征即退等形式，对特定经营者进行返还，或者给予特定经营者财政奖励或者补贴、减免自然资源有偿使用收入等优惠政策；
5) 其他没有法律、行政法规依据或者未经国务院批准，给予特定经营者选择性、差异化的财政奖励或者补贴的内容。

十二、违法给予特定经营者其他方面优惠（对应第二十条）：
1) 以直接确定受益经营者，或者设置无客观明确条件的方式在要素获取方面给予优惠政策；
2) 减免、缓征或者停征行政事业性收费、政府性基金；
3) 减免或者缓征社会保险费用；
4) 其他没有法律、行政法规依据或者未经国务院批准给予特定经营者要素获取、行政事业性收费、政府性基金、社会保险费等方面优惠的内容。

十三、强制或变相强制经营者实施垄断行为（对应第二十一条）：
1) 以行政命令、行政指导等方式，强制、组织或者引导经营者实施垄断行为；
2) 通过组织签订协议、备忘录等方式，强制或者变相强制经营者实施垄断行为；
3) 对实行市场调节价的商品、要素，违法公开披露或者要求经营者公开披露拟定价格、成本、生产销售数量、生产销售计划、经销商和终端客户信息等生产经营敏感信息；
4) 其他强制或者变相强制经营者实施垄断行为，或者为经营者实施垄断行为提供便利条件的内容。

十四、超越法定权限干预价格（对应第二十二条）：
1) 对实行政府指导价的商品、要素进行政府定价，违法提供优惠价格；
2) 对不属于本级政府定价目录范围内的商品、要素制定政府指导价、政府定价，违法提供优惠价格；
3) 不执行政府指导价或者政府定价，违法提供优惠价格；
4) 其他超越法定权限制定政府指导价、政府定价，为特定经营者提供优惠价格，影响生产经营行为的内容。

十五、违法干预市场调节价（对应第二十三条）：
1) 对实行市场调节价的商品、要素制定建议价，影响公平竞争；
2) 通过违法干预手续费、保费、折扣等方式干预实行市场调节价的商品、要素价格水平，影响公平竞争；
3) 其他违法干预实行市场调节价的商品、要素的价格水平的内容。

十六、例外规定（对应第二十五条）：
经公平竞争审查具有或者可能具有排除、限制竞争效果的政策措施，符合下列情形之一，且没有对公平竞争影响更小的替代方案，并能够确定合理的实施期限或者终止条件的，可以出台：
1) 为维护国家安全和发展利益的；
2) 为促进科学技术进步、增强国家自主创新能力的；
3) 为实现节约能源、保护环境、救灾救助等社会公共利益的；
4) 法律、行政法规规定或者经国务院批准的其他情形。

审查步骤和方法：
1. 首先识别文件类型和主要内容，确定审查重点
2. 仔细分析文件中的每一条规定，寻找是否存在限制或排除竞争的表述
3. 对发现的问题，要明确指出具体条款、问题表述，并引用《公平竞争审查条例实施办法》中的对应条款
4. 提出具体、可操作的修改建议

审查结果必须严格按照以下格式输出，并附有详细分析：

# 问题[序号]：[简要问题描述]

**问题描述：**
[详细说明该问题如何违反了公平竞争要求，包括评估其影响程度和范围]

**原文引用：**
"[准确引用原文中的相关内容]"

**违反条款：**
违反《公平竞争审查条例实施办法》第[N]条第[N]项："[引用具体条款原文]"

**修改建议：**
1. [具体可行的修改建议]
2. [如有多个建议，分条列出]

---------------------

如果发现多个问题，请按照相同格式逐一列出。

如果文件符合公平竞争要求，请明确说明："经审查，该文件符合《公平竞争审查条例实施办法》的规定，未发现限制竞争问题。"

特别注意事项：
1. 条款引用必须准确，需要同时包含条款编号和具体条款原文
2. 不要轻易放过隐性或变相的限制竞争表述，尤其要注意行文中的"优先""鼓励""支持"等词语后面是否有对特定类型或区域企业的倾向性
3. 是否构成例外情形需要谨慎判断，例外应当是例外而非常态，不能随意扩大解释
4. 修改建议必须具体可行，有针对性，而不是泛泛而谈
5. 要全面检查文件中的每一条规定，不放过任何可能限制竞争的内容`;

        const userPrompt = `请帮我审查以下政府文件是否存在限制竞争问题，找出所有疑似问题并给出修改建议：

${fileContent}`;

        console.log('构建API请求...');
        
        // 尝试不同的模型
        const models = [
            "Pro/deepseek-ai/DeepSeek-R1",
            "Pro/Qwen/Qwen2.5-7B-Instruct",
            "Pro/01-ai/Yi-VL-34B",
            "Pro/meta-llama/Meta-Llama-3-8B-Instruct",
            "Pro/meta-llama/Meta-Llama-3-70B-Instruct"
        ];
        
        console.log('可用模型列表:', models.join(', '));
        
        // 强制使用DeepSeek-R1模型，不进行轮换
        const modelToUse = "Pro/deepseek-ai/DeepSeek-R1";
        console.log(`强制使用模型: ${modelToUse}`);
        
        // 构建请求体
        const requestBody = {
            model: modelToUse,
            messages: [
                { role: "system", content: systemPrompt },
                { role: "user", content: userPrompt }
            ],
            temperature: 0.5,
            top_p: 0.95,
            max_tokens: 4000,
            stream: false  // 设置为false，以获取完整响应
        };
        
        // 设置请求头
        const headers = {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        };
        
        // 打印完整请求信息(删除敏感信息)
        const debugRequestBody = JSON.parse(JSON.stringify(requestBody));
        debugRequestBody.messages[1].content = '内容已省略...';
        console.log('请求体:', JSON.stringify(debugRequestBody, null, 2));
        console.log('请求头:', {
            'Content-Type': headers['Content-Type'],
            'Authorization': 'Bearer sk-***' // 隐藏实际API密钥
        });
        
        console.log('发送请求到硅基流动API...');
        console.log(`使用的API密钥前缀: ${apiKey.substring(0, 5)}...`);
        console.log(`使用的模型: ${modelToUse}`);
        
        let response;
        try {
            // 发送请求
            const startTime = Date.now();
            response = await axios.post(apiUrl, requestBody, { 
                headers,
                timeout: 300000, // 增加到5分钟
                maxContentLength: 50 * 1024 * 1024, // 增加到50MB
                maxBodyLength: 50 * 1024 * 1024, // 增加到50MB
                validateStatus: function (status) {
                    // 允许处理所有状态码
                    return true;
                }
            });
            const endTime = Date.now();
            
            console.log(`API响应时间: ${endTime - startTime}ms`);
            console.log('API响应状态:', response.status);
            
            // 检查状态码，如果不是2xx，抛出异常
            if (response.status < 200 || response.status >= 300) {
                let errorMessage = `API返回了错误状态码: ${response.status}`;
                
                // 格式化错误信息
                if (response.data) {
                    if (response.data.error) {
                        errorMessage = response.data.message || response.data.error;
                    } else if (typeof response.data === 'object') {
                        errorMessage += ` - ${JSON.stringify(response.data).substring(0, 200)}`;
                    }
                }
                
                // 如果是503错误，提供更友好的错误信息
                if (response.status === 503) {
                    errorMessage = "模型服务暂时不可用，请稍后再试";
                }
                
                throw new Error(errorMessage);
            }
            
            // 检查响应数据中是否包含error标志
            if (response.data && response.data.error === true) {
                console.error('API响应包含错误标志:', response.data);
                throw new Error(response.data.message || '服务器返回了错误响应');
            }
            
            // 确保响应包含所需字段
            if (!response.data || !response.data.choices || !response.data.choices[0] || !response.data.choices[0].message) {
                console.error('无效的API响应格式:', response.data);
                throw new Error('API返回了无效的响应格式');
            }
        } catch (error) {
            // 处理请求错误
            console.error('请求API时发生错误:', error.message);
            
            // 添加更详细的网络错误信息
            if (error.code) {
                console.error('网络错误代码:', error.code);
            }
            
            // 记录更多错误详情
            console.error('错误详情:', error);
            if (error.response) {
                console.error('错误响应状态:', error.response.status);
                console.error('错误响应头:', JSON.stringify(error.response.headers, null, 2));
                console.error('错误响应内容:', error.response.data);
            }
            
            // 构建更详细的错误信息
            let errorMessage = '调用API服务失败';
            if (error.message.includes('timeout')) {
                errorMessage = '请求超时，API服务响应时间过长';
            } else if (error.message.includes('Network Error')) {
                errorMessage = '网络连接错误，无法连接到API服务';
            } else if (error.response && error.response.status === 401) {
                errorMessage = 'API密钥无效或已过期，请联系管理员更新API密钥';
            } else if (error.response && error.response.status === 429) {
                errorMessage = 'API请求次数超限，请稍后再试';
            } else if (error.response && error.response.data && error.response.data.error) {
                errorMessage = `API服务错误: ${error.response.data.error}`;
            }
            
            // 将错误直接抛出，不使用本地问题分析
            throw new Error(`${errorMessage}。详细信息: ${error.message}`);
        }
        
        // 提取响应内容
        const responseContent = response.data.choices[0].message.content;
        
        // 检查是否返回思维链内容
        const hasReasoningContent = response.data.choices[0].message.reasoning_content ? true : false;
        console.log(`模型返回思维链: ${hasReasoningContent ? '是' : '否'}`);
        
        if (hasReasoningContent) {
            console.log('思维链内容预览:', response.data.choices[0].message.reasoning_content.substring(0, 100) + '...');
        }
        
        // 解析响应内容
        console.log('解析API响应内容...');
        console.log('响应内容预览:', responseContent.substring(0, 100) + '...');
        
        const issues = [];
        let totalIssues = 0;
        
        // 检查是否有问题发现
        if (responseContent.includes('问题描述') && responseContent.includes('原文引用') && responseContent.includes('违反条款')) {
            // 按问题分隔
            const problemSections = responseContent.split('---------------------');
            
            // 处理每个问题
            problemSections.forEach((section, index) => {
                if (!section.trim()) return;
                
                // 提取问题标题
                const titleMatch = section.match(/# 问题\d+：(.*)/);
                const title = titleMatch ? titleMatch[1].trim() : `问题 ${index + 1}`;
                
                // 提取问题描述
                const descriptionMatch = section.match(/\*\*问题描述：\*\*\s*([\s\S]*?)(?=\*\*原文引用：\*\*)/);
                const description = descriptionMatch ? descriptionMatch[1].trim() : '';
                
                // 提取原文引用
                const quoteMatch = section.match(/\*\*原文引用：\*\*\s*([\s\S]*?)(?=\*\*违反条款：\*\*)/);
                const quote = quoteMatch ? quoteMatch[1].trim().replace(/^"/, '').replace(/"$/, '') : '';
                
                // 增强对违反条款的提取和处理
                const violationMatch = section.match(/\*\*违反条款：\*\*\s*([\s\S]*?)(?=\*\*修改建议：\*\*)/);
                let violation = violationMatch ? violationMatch[1].trim() : '';
                
                // 提取条款号
                let currentClauseNum = null;
                const clauseMatch = violation.match(/第(\d+)条/);
                if (clauseMatch) {
                    currentClauseNum = clauseMatch[1];
                }
                
                // 使用智能条款检测系统
                const suggestedClauseNum = intelligentClauseDetection(
                    title,
                    description,
                    quote,
                    currentClauseNum
                );
                
                // 提取项号(如果有)
                let itemNum = '';
                const itemMatch = violation.match(/第(\d+)项/);
                if (itemMatch) {
                    itemNum = itemMatch[1];
                }
                
                // 如果检测系统建议不同的条款，或者未提供条款但有建议
                if ((currentClauseNum && suggestedClauseNum && currentClauseNum !== suggestedClauseNum) || 
                    (!currentClauseNum && suggestedClauseNum)) {
                    
                    // 尝试智能识别最合适的项号
                    if (!itemNum) {
                        // 如果没有明确的项号，分析文本内容找出最匹配的项
                        let bestMatchItem = findBestMatchingItem(suggestedClauseNum, title + ' ' + description + ' ' + quote);
                        if (bestMatchItem) {
                            itemNum = bestMatchItem;
                            console.log(`智能识别到最匹配的项号: 第${itemNum}项`);
                        } else {
                            // 如果无法识别，默认使用第1项
                            itemNum = '1';
                            console.log(`未能识别项号，默认使用第1项`);
                        }
                    }
                    
                    // 获取正确的条款内容
                    const correctContent = getClauseContent(suggestedClauseNum, itemNum);
                    
                    // 更新违反条款内容
                    violation = `违反《公平竞争审查条例实施办法》第${suggestedClauseNum}条第${itemNum}项："${correctContent}"`;
                    
                    console.log(`已修正条款引用: 从第${currentClauseNum || '未指定'}条改为第${suggestedClauseNum}条第${itemNum}项`);
                } else if (currentClauseNum) {
                    // 如果保持当前条款，确保项号和条款内容正确匹配
                    if (!itemNum) {
                        // 如果没有明确的项号，分析文本内容找出最匹配的项
                        let bestMatchItem = findBestMatchingItem(currentClauseNum, title + ' ' + description + ' ' + quote);
                        if (bestMatchItem) {
                            itemNum = bestMatchItem;
                            console.log(`智能识别到最匹配的项号: 第${itemNum}项`);
                        } else {
                            // 如果无法识别，默认使用第1项
                            itemNum = '1';
                            console.log(`未能识别项号，默认使用第1项`);
                        }
                    }
                    
                    // 获取正确的条款内容
                    const clauseContent = getClauseContent(currentClauseNum, itemNum);
                    
                    // 确保条款内容完整正确
                    if (!violation.includes('："') || !violation.includes('项')) {
                        violation = `违反《公平竞争审查条例实施办法》第${currentClauseNum}条第${itemNum}项："${clauseContent}"`;
                        console.log(`已补充完整条款引用: 第${currentClauseNum}条第${itemNum}项`);
                    }
                }
                
                // 提取修改建议
                const suggestionMatch = section.match(/\*\*修改建议：\*\*\s*([\s\S]*?)(?=---|$)/);
                const suggestion = suggestionMatch ? suggestionMatch[1].trim() : '';
                
                // 添加到问题列表
                if (description || quote || violation || suggestion) {
                    issues.push({
                        id: index + 1,
                        title,
                        description,
                        quote,
                        violation,
                        suggestion
                    });
                    
                    totalIssues++;
                }
            });
        }
        
        // 如果没有找到问题，可能格式不是预期的
        if (totalIssues === 0 && responseContent.length > 100) {
            console.log('未检测到标准格式的问题，尝试简单解析...');
            
            // 创建一个通用问题
            issues.push({
                id: 1,
                title: '审查结果',
                description: '未检测到标准格式的问题，以下是原始审查结果:',
                quote: '',
                violation: '',
                suggestion: responseContent
            });
            
            totalIssues = 1;
        }
        
        console.log(`共解析出 ${totalIssues} 个问题`);
        
        // 构建最终结果
        const result = {
            fileName: req.file.originalname,
            fileSize: req.file.size,
            totalIssues,
            issues,
            rawResponse: responseContent,
            reasoningContent: hasReasoningContent ? response.data.choices[0].message.reasoning_content : null
        };
        
        return result;
    } catch (error) {
        console.error('处理审查过程中出错:', error);
        // 确保返回标准化的JSON错误格式
        throw {
            statusCode: 500,
            message: error.message || '服务器内部错误',
            error: true
        };
    }
}

// 健康检查接口
app.get('/health', (req, res) => {
    res.json({ status: 'ok', version: '2.3.3' });
});

// 处理文件上传和审查
app.post('/review', upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            throw new Error('未上传文件');
        }
        
        // 修改文件类型验证，移除PDF
        if (!['text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'].includes(req.file.mimetype)) {
            throw new Error('不支持的文件类型，仅支持DOCX和TXT文件');
        }
        
        const result = await performReview(req);
        res.json(result);
    } catch (error) {
        console.error('处理请求时出错:', error);
        
        // 确保返回标准化的错误响应
        const statusCode = error.statusCode || 500;
        const errorResponse = {
            error: true,
            message: error.message || '服务器内部错误',
            details: process.env.NODE_ENV === 'development' ? error.stack : undefined
        };
        
        res.status(statusCode).json(errorResponse);
    }
});

// 修改导出路由
app.post('/export', async (req, res) => {
    try {
        console.log('收到导出请求:', {
            fileName: req.body.fileName,
            issuesCount: req.body.issues?.length || 0
        });

        const { fileName, issues } = req.body;
        
        if (!fileName) {
            console.error('导出请求缺少文件名');
            return res.status(400).json({ error: '缺少文件名' });
        }

        if (!Array.isArray(issues)) {
            console.error('导出请求中的issues不是数组:', issues);
            return res.status(400).json({ error: '问题列表格式不正确' });
        }

        console.log('处理的issues数据样例:', JSON.stringify(issues.slice(0, 1), null, 2));

        try {
            // 创建Word文档 - 使用更接近网页显示的简洁风格
            const doc = new Document({
                styles: {
                    paragraphStyles: [
                        {
                            id: "Title",
                            name: "Title",
                            basedOn: "Normal",
                            next: "Normal",
                            run: {
                                size: 40,  // 更大的标题
                                font: "黑体",
                                bold: true,
                            },
                            paragraph: {
                                alignment: AlignmentType.CENTER,
                                spacing: { line: 380, before: 240, after: 240 },
                            },
                        },
                        {
                            id: "Heading1",
                            name: "Heading 1",
                            basedOn: "Normal",
                            next: "Normal",
                            run: {
                                size: 40,  // 更大的标题
                                font: "黑体",
                                bold: true,
                            },
                            paragraph: {
                                alignment: AlignmentType.CENTER,
                                spacing: { line: 380, before: 240, after: 240 },
                            },
                        },
                        {
                            id: "Heading3",
                            name: "Heading 3",
                            basedOn: "Normal",
                            next: "Normal",
                            run: {
                                size: 32,  // 问题标题
                                font: "黑体",
                                bold: true,
                                color: "333333",
                            },
                            paragraph: {
                                spacing: { line: 380, before: 240, after: 120 },
                                indent: {
                                    firstLine: 0  // 问题标题不需要缩进
                                }
                            },
                        },
                        {
                            id: "Normal",
                            name: "Normal",
                            run: {
                                size: 24,  // 正文字体
                                font: "仿宋",
                            },
                            paragraph: {
                                spacing: { line: 380, before: 0, after: 0 },
                                indent: {
                                    firstLine: 560  // 全局添加首行缩进2字符
                                }
                            },
                        },
                    ],
                },
                sections: [{
                    properties: {
                        page: {
                            margin: {
                                top: 1134,    // 约40mm
                                right: 1134,  // 约40mm
                                bottom: 1134, // 约40mm
                                left: 1134,   // 约40mm
                            }
                        }
                    },
                    children: [
                        new Paragraph({
                            text: `《${fileName.replace(/\.[^/.]+$/, '')}》公平竞争审查报告`,
                            style: "Heading1",
                        }),
                        new Paragraph({
                            children: [
                                new TextRun({ 
                                    text: `发现 `,
                                    size: 32,
                                    font: "仿宋"
                                }),
                                new TextRun({ 
                                    text: issues.length.toString(),
                                    size: 32,
                                    font: "仿宋",
                                    color: "FF0000",
                                    bold: true
                                }),
                                new TextRun({ 
                                    text: ` 个问题`,
                                    size: 32,
                                    font: "仿宋"
                                }),
                            ],
                            alignment: AlignmentType.CENTER,
                            spacing: {
                                after: 480,
                                line: 380
                            }
                        }),
                        new Paragraph({
                            text: `审查依据：《公平竞争审查条例实施办法》（国家市场监督管理总局2025年2月28日公布）`,
                            size: 28,
                            font: "仿宋",
                            color: "333333",
                            spacing: {
                                after: 560,
                                line: 380
                            },
                            indent: {
                                firstLine: 560  // 添加首行缩进2字符
                            }
                        }),
                    ].concat(
                        // 使用更简洁的问题展示格式
                        issues.flatMap((issue, index) => {
                            console.log(`处理问题 ${index + 1}`);
                            const result = [];
                            
                            // 创建问题卡片风格的边框段落 - 浅黄色背景卡片，类似图片中的样式
                            result.push(
                                new Paragraph({
                                    text: `问题 ${index + 1}：${issue.title || '未命名问题'}`,
                                    style: "Heading3",
                                    shading: {
                                        type: ShadingType.CLEAR,
                                        color: "FFF8DC", // 浅黄色背景
                                        fill: "FFF8DC"
                                    },
                                    border: {
                                        top: {
                                            color: "F0F0F0",
                                            space: 1,
                                            value: "single",
                                            size: 6
                                        },
                                        bottom: {
                                            color: "F0F0F0",
                                            space: 1,
                                            value: "single",
                                            size: 6
                                        },
                                        left: {
                                            color: "F0F0F0",
                                            space: 1,
                                            value: "single",
                                            size: 6
                                        },
                                        right: {
                                            color: "F0F0F0",
                                            space: 1,
                                            value: "single",
                                            size: 6
                                        }
                                    },
                                    spacing: {
                                        before: 360,
                                        after: 240,
                                    },
                                    indent: {
                                        left: 0,
                                        firstLine: 0  // 标题不缩进
                                    }
                                })
                            );
                            
                            // 问题描述 - 白色背景
                            if (issue.description) {
                                result.push(
                                    new Paragraph({
                                        children: [
                                            new TextRun({ 
                                                text: "问题描述：",
                                                bold: true,
                                                size: 24,
                                                font: "仿宋"
                                            }),
                                            new TextRun({ 
                                                text: issue.description,
                                                size: 24,
                                                font: "仿宋"
                                            }),
                                        ],
                                        spacing: {
                                            before: 120,
                                            after: 120,
                                            line: 380
                                        },
                                        indent: {
                                            firstLine: 560  // 添加首行缩进2字符
                                        }
                                    })
                                );
                            }
                            
                            // 原文引用 - 浅蓝色左边框，类似图片中的引用样式
                            if (issue.quote) {
                                result.push(
                                    new Paragraph({
                                        children: [
                                            new TextRun({ 
                                                text: issue.quote,
                                                italics: true,
                                                size: 24,
                                                font: "仿宋"
                                            }),
                                        ],
                                        spacing: {
                                            before: 120,
                                            after: 120,
                                            line: 380
                                        },
                                        shading: {
                                            type: ShadingType.CLEAR,
                                            color: "F0F8FF",
                                            fill: "F0F8FF"
                                        },
                                        border: {
                                            left: {
                                                color: "4169E1",
                                                space: 1,
                                                value: "single",
                                                size: 16
                                            }
                                        },
                                        indent: {
                                            left: 280,
                                            right: 280,
                                            firstLine: 0  // 引用不需要首行缩进
                                        }
                                    })
                                );
                            }
                            
                            // 违反条款 - 普通段落
                            if (issue.violation) {
                                result.push(
                                    new Paragraph({
                                        children: [
                                            new TextRun({ 
                                                text: "违反条款：", 
                                                bold: true,
                                                size: 24,
                                                font: "仿宋"
                                            }),
                                            new TextRun({ 
                                                text: issue.violation,
                                                size: 24,
                                                font: "仿宋"
                                            }),
                                        ],
                                        spacing: {
                                            before: 120,
                                            after: 120,
                                            line: 380
                                        },
                                        indent: {
                                            firstLine: 560  // 添加首行缩进2字符
                                        }
                                    })
                                );
                            }
                            
                            // 修改建议 - 浅绿色背景，类似图片中的建议样式
                            if (issue.suggestion) {
                                // 添加"修改建议:"标题
                                result.push(
                                    new Paragraph({
                                        text: "修改建议:",
                                        spacing: {
                                            before: 120,
                                            after: 60,
                                            line: 380
                                        },
                                        indent: {
                                            firstLine: 560  // 添加首行缩进2字符
                                        },
                                        run: {
                                            bold: true,
                                            size: 24,
                                            font: "仿宋"
                                        }
                                    })
                                );
                                
                                // 修改建议内容
                                result.push(
                                    new Paragraph({
                                        children: [
                                            new TextRun({ 
                                                text: issue.suggestion,
                                                size: 24,
                                                font: "仿宋"
                                            }),
                                        ],
                                        spacing: {
                                            before: 0,
                                            after: 240,
                                            line: 380
                                        },
                                        shading: {
                                            type: ShadingType.CLEAR,
                                            color: "F0FFF0",
                                            fill: "F0FFF0"
                                        },
                                        indent: {
                                            left: 280,
                                            right: 280,
                                            firstLine: 560  // 添加首行缩进2字符
                                        }
                                    })
                                );
                            }
                            
                            return result;
                        })
                    ).concat([
                        new Paragraph({
                            text: "本报告由AI自动生成，仅供参考。内容如有疑问，请以相关法律法规为准。",
                            alignment: AlignmentType.CENTER,
                            spacing: {
                                before: 560,
                                after: 240,
                                line: 380
                            },
                            run: {
                                size: 24,
                                font: "仿宋",
                                color: "666666"
                            }
                        }),
                        new Paragraph({
                            text: `生成时间：${new Date().toLocaleString()}`,
                            alignment: AlignmentType.CENTER,
                            spacing: {
                                after: 240,
                                line: 380
                            },
                            run: {
                                size: 24,
                                font: "仿宋",
                                color: "666666"
                            }
                        }),
                    ]),
                }],
            });

            console.log('开始生成Word文档...');
            
            // 生成Word文档
            const buffer = await Packer.toBuffer(doc);
            console.log('Word文档生成成功，大小:', buffer.length, '字节');
            
            // 处理文件名
            const safeFileName = encodeURIComponent(fileName.replace(/\.[^/.]+$/, '') + '_审查报告.docx');
            
            // 发送Word文档 - 修复响应头
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
            res.setHeader('Content-Disposition', `attachment; filename="${safeFileName}"; filename*=UTF-8''${safeFileName}`);
            res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
            res.setHeader('Pragma', 'no-cache');
            res.setHeader('Expires', '0');
            
            // 发送缓冲区
            res.end(buffer);
            console.log('文档发送成功');
        } catch (docError) {
            console.error('生成Word文档时出错:', docError);
            console.error('文档错误堆栈:', docError.stack);
            throw new Error(`Word文档生成失败: ${docError.message}`);
        }
    } catch (error) {
        console.error('生成Word报告时出错:', error);
        console.error('错误堆栈:', error.stack);
        res.status(500).json({ 
            error: '生成Word报告失败',
            details: error.message
        });
    }
});

// 启动服务器
if (require.main === module) {
  app.listen(port, () => {
    console.log(`服务器运行在 http://localhost:${port}`);
  });
}

// 为Vercel部署导出应用
module.exports = app;
